//! Minimal strongly typed quantity system for common electromagnetism units.

use std::fmt;
use std::marker::PhantomData;

/// Marker trait implemented by unit types.
pub trait Unit: Copy + Clone + Default + 'static {
    /// Human-readable unit symbol (e.g. `V` for volts).
    const SYMBOL: &'static str;
}

/// Strongly typed scalar quantity tagged by a unit marker.
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Clone, Copy, PartialEq, PartialOrd, Debug)]
pub struct Quantity<T, U>
where
    T: Copy,
    U: Unit,
{
    value: T,
    _unit: PhantomData<U>,
}

impl<T, U> Quantity<T, U>
where
    T: Copy,
    U: Unit,
{
    /// Creates a new quantity from a raw scalar value.
    #[must_use]
    pub const fn new(value: T) -> Self {
        Self {
            value,
            _unit: PhantomData,
        }
    }

    /// Returns the underlying scalar representation.
    #[must_use]
    pub const fn value(self) -> T {
        self.value
    }
}

impl<T, U> fmt::Display for Quantity<T, U>
where
    T: Copy + fmt::Display,
    U: Unit,
{
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "{} {}", self.value, U::SYMBOL)
    }
}

macro_rules! define_unit {
    ($name:ident, $symbol:literal) => {
        /// Unit marker generated by the `define_unit!` macro.
        #[derive(Debug, Default, Clone, Copy)]
        pub struct $name;

        impl Unit for $name {
            const SYMBOL: &'static str = $symbol;
        }
    };
}

define_unit!(Volt, "V");
define_unit!(Ampere, "A");
define_unit!(Ohm, "Î©");
define_unit!(Farad, "F");
define_unit!(Henry, "H");
define_unit!(Siemens, "S");
define_unit!(Tesla, "T");
define_unit!(Weber, "Wb");

/// Helper alias for volt quantities.
pub type Voltage<T> = Quantity<T, Volt>;
/// Helper alias for ampere quantities.
pub type Current<T> = Quantity<T, Ampere>;
/// Helper alias for ohmic impedance quantities.
pub type Impedance<T> = Quantity<T, Ohm>;

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn display_formats_with_symbol() {
        let voltage = Voltage::new(5.0_f64);
        assert_eq!(format!("{voltage}"), "5 V");
    }
}
